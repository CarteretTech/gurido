---
/**
 * ServiceCard.astro
 * Displays information about a service with animated hover effects and interactive elements
 */
import GlossaryTooltip from '../utils/GlossaryTooltip.astro';

interface Props {
  service: {
    id: string;
    name: string;
    shortDescription: string;
    icon: string;
    seoTerms?: string[]; // Array of SEO terms to highlight with tooltips
    features?: string[]; // Key features of the service
    pricing: {
      basic: number;
    };
  };
  animationDelay?: number;
  hasUseCases?: boolean; // Whether this service has use cases to show in offcanvas
}

const { service, animationDelay = 0, hasUseCases = true } = Astro.props;

// Function to parse the description and replace SEO terms with tooltips
function processDescription(description: string, terms: string[] = []) {
  if (!terms.length) return description;
  
  // Simple implementation - in a real app you might want a more sophisticated parser
  let processed = description;
  terms.forEach(term => {
    const regex = new RegExp(`\\b${term}\\b`, 'gi');
    processed = processed.replace(regex, `<span class="tooltip-term" data-term="${term}">${term}</span>`);
  });
  
  return processed;
}

const processedDescription = service.seoTerms 
  ? processDescription(service.shortDescription, service.seoTerms)
  : service.shortDescription;
---

<div 
  class="service-card bg-card-bg rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg hover:-translate-y-1 animate-on-scroll" 
  style={animationDelay ? `animation-delay: ${animationDelay}ms` : undefined}
>
  <div class="p-6 flex flex-col h-full">
    <div class="flex items-center mb-4">
      <div class="w-12 h-12 flex items-center justify-center rounded-full bg-primary/10 text-primary">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          {service.icon === 'magnifying-glass' && (
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          )}
          {service.icon === 'key' && (
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z" />
          )}
          {service.icon === 'map-pin' && (
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          )}
          {service.icon === 'chart-bar' && (
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          )}
          {service.icon === 'code' && (
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
          )}
          {service.icon === 'document-text' && (
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          )}
        </svg>
      </div>
      <h3 class="text-xl font-bold ml-4 text-text-primary">{service.name}</h3>
    </div>
    
    <div class="description-container flex-grow mb-4">
      {service.seoTerms ? (
        <p class="text-text-secondary" set:html={processedDescription} />
      ) : (
        <p class="text-text-secondary">{service.shortDescription}</p>
      )}

      {service.features && service.features.length > 0 && (
        <ul class="service-features mt-4">
          {service.features.slice(0, 3).map((feature) => (
            <li class="feature-item">
              <svg xmlns="http://www.w3.org/2000/svg" class="feature-check" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span>{feature}</span>
            </li>
          ))}
        </ul>
      )}
    </div>
    
    <div class="flex justify-between items-center mt-auto">
      <span class="text-sm text-text-muted capitalize">${service.pricing.basic}+ /mo</span>
      
      <div class="action-buttons flex gap-3">
        {hasUseCases && (
          <button 
            class="use-cases-btn text-sm text-primary font-medium flex items-center hover:underline"
            data-open-offcanvas={`use-cases-${service.id}`}
            aria-label={`View use cases for ${service.name}`}
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
            Use Cases
          </button>
        )}

        <a 
          href={`/services/${service.id}`} 
          class="learn-more-btn text-primary font-medium flex items-center group-hover:translate-x-1 transition-transform"
        >
          Learn more
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  .service-card {
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .service-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, var(--color-primary-dark) 0%, transparent 100%);
    opacity: 0;
    z-index: -1;
    transition: opacity 0.5s ease;
  }

  .service-card:hover::before {
    opacity: 0.03;
  }

  /* Enhanced hover animations */
  .service-card:hover .text-primary {
    transform: scale(1.05);
  }

  .text-primary {
    transition: transform 0.3s ease;
  }

  .tooltip-term {
    position: relative;
    color: var(--color-primary);
    font-weight: 500;
    cursor: pointer;
    border-bottom: 1px dotted var(--color-primary);
    transition: color 0.2s ease;
  }

  .service-features {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  .feature-item {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    color: var(--color-text-secondary);
  }

  .feature-check {
    width: 1rem;
    height: 1rem;
    color: var(--color-primary);
    margin-right: 0.5rem;
    flex-shrink: 0;
  }

  .action-buttons {
    display: flex;
    align-items: center;
  }

  /* Hover effect for buttons */
  .use-cases-btn, .learn-more-btn {
    transition: transform 0.2s ease;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
  }

  .use-cases-btn:hover, .learn-more-btn:hover {
    transform: translateY(-2px);
    background-color: rgba(var(--color-primary-rgb), 0.05);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Find all tooltip terms in the service cards
    const tooltipTerms = document.querySelectorAll('.tooltip-term');
    
    tooltipTerms.forEach(termElement => {
      const term = termElement.getAttribute('data-term');
      if (!term) return;
      
      // Fetch the data from the server - in this case we're simulating
      // by using a dummy definition
      fetch(`/api/glossary?term=${encodeURIComponent(term)}`)
        .then(response => {
          // This is just a placeholder in case there's no API
          // In a real app, you would actually fetch this data
          return {
            term: term,
            definition: `Definition for ${term}. Click to learn more.`,
          };
        })
        .then(termData => {
          // Create a tooltip for this term
          const tooltip = document.createElement('div');
          tooltip.className = 'card-tooltip';
          tooltip.innerHTML = `
            <div class="card-tooltip-content">
              <strong>${termData.term}</strong>
              <p>${termData.definition}</p>
            </div>
          `;
          
          // Add tooltip functionality
          termElement.appendChild(tooltip);
          
          termElement.addEventListener('mouseenter', () => {
            tooltip.classList.add('show');
          });
          
          termElement.addEventListener('mouseleave', () => {
            tooltip.classList.remove('show');
          });
        })
        .catch(error => console.error('Error fetching glossary data', error));
    });
  });
</script>
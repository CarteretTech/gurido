---
/**
 * ServiceUseCases.astro
 * Component to display use cases for services in an offcanvas panel.
 */
import GlossaryTooltip from '../utils/GlossaryTooltip.astro';

interface UseCaseItem {
  title: string;
  description: string;
  result?: string;
  industrySpecific?: boolean;
}

interface Props {
  serviceId: string;
  serviceName: string;
  useCases: UseCaseItem[];
  seoTerms?: string[];
}

const { serviceId, serviceName, useCases = [], seoTerms = [] } = Astro.props;

// Function to process text and replace SEO terms with tooltips
function processText(text: string, terms: string[] = []) {
  if (!terms.length) return text;
  
  let processed = text;
  terms.forEach(term => {
    const regex = new RegExp(`\\b${term}\\b`, 'gi');
    processed = processed.replace(regex, `<span class="tooltip-term" data-term="${term}">${term}</span>`);
  });
  
  return processed;
}
---

<div class="service-use-cases">
  <div class="use-cases-header">
    <h3 class="text-xl font-bold mb-4">How {serviceName} Can Help Your Business</h3>
    <p class="text-text-secondary mb-6">
      See real examples of how this service delivers results for businesses like yours.
    </p>
  </div>

  <div class="use-cases-list">
    {useCases.map((useCase, index) => (
      <div class="use-case-item animate-on-scroll" style={`animation-delay: ${index * 150}ms`}>
        <div class="use-case-number">{index + 1}</div>
        <div class="use-case-content">
          <h4 class="use-case-title">{useCase.title}</h4>
          <p class="use-case-description" set:html={processText(useCase.description, seoTerms)} />
          
          {useCase.result && (
            <div class="use-case-result">
              <span class="result-label">Result:</span>
              <span class="result-text" set:html={processText(useCase.result, seoTerms)} />
            </div>
          )}
          
          {useCase.industrySpecific && (
            <span class="industry-badge">Industry Specific</span>
          )}
        </div>
      </div>
    ))}
  </div>
  
  <div class="use-cases-cta">
    <p class="text-center text-text-secondary mb-4">
      Want to see how {serviceName} can be customized for your specific business?
    </p>
    <a href={`/services/${serviceId}`} class="btn-primary w-full">
      Learn More About {serviceName}
    </a>
  </div>
</div>

<style>
  .service-use-cases {
    padding: 1.5rem;
  }

  .use-cases-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  .use-case-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--color-card-bg);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .use-case-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .use-case-number {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    background-color: var(--color-primary);
    color: white;
    border-radius: 50%;
    font-weight: bold;
    flex-shrink: 0;
  }

  .use-case-content {
    flex: 1;
  }

  .use-case-title {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
  }

  .use-case-description {
    color: var(--color-text-secondary);
    font-size: 0.9rem;
    margin-bottom: 0.75rem;
  }

  .use-case-result {
    background-color: rgba(var(--color-primary-rgb), 0.1);
    border-left: 3px solid var(--color-primary);
    padding: 0.5rem;
    margin-top: 0.5rem;
    border-radius: 0 0.25rem 0.25rem 0;
  }

  .result-label {
    font-weight: 600;
    color: var(--color-primary);
    margin-right: 0.5rem;
  }

  .industry-badge {
    display: inline-block;
    background-color: var(--color-secondary);
    color: white;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 1rem;
    margin-top: 0.5rem;
  }

  .btn-primary {
    display: inline-block;
    background-color: var(--color-primary);
    color: white;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    text-align: center;
    transition: background-color 0.3s ease, transform 0.3s ease;
  }

  .btn-primary:hover {
    background-color: var(--color-primary-dark);
    transform: translateY(-2px);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Find all tooltip terms in the use cases
    const tooltipTerms = document.querySelectorAll('.tooltip-term');
    
    tooltipTerms.forEach(termElement => {
      const term = termElement.getAttribute('data-term');
      if (!term) return;
      
      // Fetch the data from the glossary
      // In a real app, this would fetch from your API
      fetch(`/api/glossary?term=${encodeURIComponent(term)}`)
        .then(response => {
          // Placeholder for the API response
          return {
            term: term,
            definition: `Definition for ${term}. Click to learn more.`,
          };
        })
        .then(termData => {
          // Create a tooltip for this term
          const tooltip = document.createElement('div');
          tooltip.className = 'tooltip';
          tooltip.innerHTML = `
            <div class="tooltip-content">
              <strong>${termData.term}</strong>
              <p>${termData.definition}</p>
            </div>
          `;
          
          // Add tooltip functionality
          termElement.appendChild(tooltip);
          
          termElement.addEventListener('mouseenter', () => {
            tooltip.classList.add('show');
          });
          
          termElement.addEventListener('mouseleave', () => {
            tooltip.classList.remove('show');
          });
        })
        .catch(error => console.error('Error fetching glossary data', error));
    });
  });
</script>